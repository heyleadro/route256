// Code generated by mockery v2.30.1. DO NOT EDIT.

package notifications

import (
	model "route256/notifications/internal/model"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockDB is an autogenerated mock type for the DB type
type MockDB struct {
	mock.Mock
}

// AddToDB provides a mock function with given fields: userID, orderID, timeStamp
func (_m *MockDB) AddToDB(userID int64, orderID int64, timeStamp time.Time) error {
	ret := _m.Called(userID, orderID, timeStamp)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64, time.Time) error); ok {
		r0 = rf(userID, orderID, timeStamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserHistory provides a mock function with given fields: userID
func (_m *MockDB) GetUserHistory(userID int64) ([]model.UserNotification, error) {
	ret := _m.Called(userID)

	var r0 []model.UserNotification
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) ([]model.UserNotification, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int64) []model.UserNotification); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserNotification)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockDB creates a new instance of MockDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDB {
	mock := &MockDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
