// Code generated by mockery v2.30.1. DO NOT EDIT.

package notifications

import (
	model "route256/notifications/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// MockConsumer is an autogenerated mock type for the Consumer type
type MockConsumer struct {
	mock.Mock
}

// Subscribe provides a mock function with given fields: topic, handle, ch
func (_m *MockConsumer) Subscribe(topic string, handle func(string) error, ch chan model.Info) error {
	ret := _m.Called(topic, handle, ch)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, func(string) error, chan model.Info) error); ok {
		r0 = rf(topic, handle, ch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockConsumer creates a new instance of MockConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConsumer {
	mock := &MockConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
